package com.ems.BookingService.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ems.BookingService.clients.EventClient;
import com.ems.BookingService.clients.UserClient;
import com.ems.BookingService.entities.Booking;
import com.ems.BookingService.repositories.BookingRepository;

@Service
public class BookingService {

	@Autowired
	private BookingRepository bookingRepository;

	@Autowired
	private UserClient userClient;

	@Autowired
	private EventClient eventClient;

	
	package com.bookingservice.service;

	import com.bookingservice.dto.BookingResponseDTO;
	import com.bookingservice.dto.EventDTO;
	import com.bookingservice.dto.UserDTO;
	import com.bookingservice.feign.EventClient;
	import com.bookingservice.feign.UserClient;
	import com.bookingservice.model.Booking;
	import com.bookingservice.repository.BookingRepository;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

	@Service
	public class BookingService {

	    @Autowired
	    private BookingRepository bookingRepository;

	    @Autowired
	    private UserClient userClient;

	    @Autowired
	    private EventClient eventClient;

	    public BookingResponseDTO bookEvent(Long userId, Long eventId) {
	        // Call Feign Clients
	        UserDTO user = userClient.getUserById(userId);
	        EventDTO event = eventClient.getEventById(eventId);

	        // Create booking entity
	        Booking booking = Booking.builder()
	                .userId(userId)
	                .eventId(eventId)
	                .status("CONFIRMED")
	                .build();

	        Booking saved = bookingRepository.save(booking);

	        // Return DTO
	        BookingResponseDTO response = new BookingResponseDTO();
	        response.setBookingId(saved.getId());
	        response.setUser(user);
	        response.setEvent(event);
	        response.setStatus(saved.getStatus());

	        return response;
	    }
	

	public Booking createBooking(Booking booking) {
		booking.setBookingDate(new java.util.Date());
		booking.setStatus(Booking.Status.CONFIRMED);
		return bookingRepository.save(booking);
	}

	public List<Booking> getAllBookings() {
		return bookingRepository.findAll();
	}

	public Optional<Booking> getBookingById(Long id) {
		return bookingRepository.findById(id);
	}

	public List<Booking> getBookingsByUserId(Long userId) {
		return bookingRepository.findByUserId(userId);
	}

	public List<Booking> getBookingsByEventId(Long eventId) {
		return bookingRepository.findByEventId(eventId);
	}

	public void cancelBooking(Long id) {
		Optional<Booking> booking = bookingRepository.findById(id);
		booking.ifPresent(b -> {
			b.setStatus(Booking.Status.CANCELLED);
			bookingRepository.save(b);
		});
	}
}
